- products = []
- customers = []
%h2 Product Allocation
%hr/
- if session[:bulk_order].present? && session[:bulk_order]['products'].present?
  - products = ShopifyAPI::Product.find(:all, params: {ids: session[:bulk_order]['products'].join(',')}) 
- if session[:bulk_order].present? && session[:bulk_order]['distributors'].present?
  - customers = ShopifyAPI::Customer.find(:all, params: {ids: session[:bulk_order]['distributors'].join(',')})
= form_tag( ENV["pre_fix_url"]+place_bulk_order_path(action_type: 'save_orders'), method: :post, id: 'order_place') do
  - (session[:bulk_order]['distributors']||[]).each do |v|
    = hidden_field_tag "locations[]", v
  - (session[:bulk_order]['products']||[]).each do |v|
    = hidden_field_tag "products[]", v
  = hidden_field_tag "shipping_method", 'Base On Weight'
  .row
    .row.no-border
      .row-height
        -if customers.present?
          .col-height.col-md-6{:style => "position:relative;"}
            - p_style = products.blank? ? "" : 'top:100px;'
            #price-list.table-responsive{:style => "position:relative; #{p_style} width:100% !important;"}
              %table.table.extra-padding
                %thead
                  %tr.fixed-td
                    %th Location
                    %th Total Quantity
                    %th Total Price
                    %th Shipping Cost
                - customers.each do |customer|
                  - distributor_id = customer.id.to_s
                  - if customer.present?
                    - default_address = customer.default_address rescue nil
                    - if default_address.present?
                      =  hidden_field_tag "order[distributors][#{distributor_id}]shipping_amount" ,0 , id: "shipping-#{distributor_id}"
                      %tbody
                        %tr.fixed-td
                          %td.ellipses
                            = "#{default_address.address1}, #{default_address.city}"
                            - if @error_message.present? 
                              - if @error_message[distributor_id].present?
                                .error-message
                                  = @error_message[distributor_id].html_safe
                          %td{class: "text-right distributor-total-quantity-#{distributor_id}"}
                            0
                          %td{class: "text-right distributor-total-amount-#{distributor_id}"}
                            0
                          %td{class: "text-right distributor-shipping-amount distributor-total-shipping-amount-#{distributor_id}"}
                            0
        - if products.present?
          .col-height.col-md-6
            #datatable-wrapper.table-responsive
              %table#datatable.table.text-center.fixed-width
                - products.each do |product|
                  - product_id = product.id
                  - variant = product.variants.first
                  - custom_product = Product.find_by_shopify_product_id(product_id)
                  - min_quantity = custom_product.blank? || custom_product.min_quantity.blank? ? 'Quantity' : "Minimum = #{custom_product.min_quantity}"
                  - min_value = custom_product.blank? || custom_product.min_quantity.blank? ? '' : custom_product.min_quantity
                  - if @orders.present?
                    - value = params[:order][:distributors][distributor_id]['product'][product.id.to_s]['quantity']
                  - else
                    - value = custom_product.present? ? custom_product.min_quantity : 0
                  - default_price = custom_product.present? ? custom_product.get_price(value, variant.price) : variant.price
                  %tr
                    %td
                      = link_to image_tag(product.image.src, style: 'width:100px;') , ENV["pre_fix_url"]++place_bulk_order_path(action_type: 'product-detail-pop', product_id: product.id,locations: session[:bulk_order]['distributors']||[], products: session[:bulk_order]['products']||[]), class: 'fancybox img-responsive center-block' , remote: true
                    %td.ellipses= product.title
                    %td.text-right= variant.price
                    %td
                    %td
                    - customers.each do |customer|
                      - distributor_id = customer.id.to_s
                      - default_address = customer.default_address rescue nil
                      - if default_address.present?
                        %td
                          = text_field_tag "order[distributors][#{distributor_id}][product][#{product.id}]quantity", value, class: "form-control text-right order-quantity product-#{product.id} distributor-#{distributor_id}", type: "number", oninput: "check_val(this,#{value})", min: min_value, placeholder: min_quantity, id: "order-#{distributor_id}-#{product.id}", product_price: default_price, product_weight: variant.weight, country: default_address.country, province: default_address.province, country_code: default_address.country_code, province_code: default_address.province_code, city: default_address.city, zip: default_address.zip
    %hr/
    .row.no-border
      .row-height
        .col-height.col-md-6
          #pricelist-shadow.table-responsive
            %table.table
              %tr
                %td
                  %strong Total Price
              %tr
                %td
                  %strong Total Quantity
        .col-height.col-md-6
          #datatable-shadow.table-responsive
            %table.table.text-right.fixed-width
              %tr
                - products.each do |product|
                  %td{style: "font-weight:bold;",class: "product-total-amount-#{product.id}"} 0
              %tr
                - products.each do |product|
                  %td{style: "font-weight:bold;",class: "product-total-quantity-#{product.id}"} 0
    %h4 &nbsp;
    -if customers.present? && products.present?
      .row
        .col-md-2.col-sm-2.col-xs-2
          %a.btn.btn-primary{:href => "#", onclick: "$('form#order_place').submit();"}
            Place Order  
            %i.fa.fa-caret-right
    %h2 &nbsp;
    %h2 &nbsp;
#loader.none
  = image_tag 'loader.png'
:javascript
  $("#shipping_method").val($("#shipping_type").val());
  $( ".order-quantity" ).each(function() {
    cacheing_value = getCookie($(this).attr('id'))
    if(typeof cacheing_value != "undefined"){
      $(this).val(cacheing_value)
    }      
    if(parseInt($(this).val()) > 0){
      update_product_price($(this).attr('id'), $(this).val());
    }
  });
  var ca = document.cookie.split(';');
  for(var i = 0; i <ca.length; i++) {
      if(ca.indexOf('order-' == 0)){
          var c = ca[i].split('=')[0];
          console.log(c);
          if($('#'+c.trim()).length == 0){
            document.cookie = c + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
          }

      }
  }